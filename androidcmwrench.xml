<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     Jan 26, 2012 7:17:14 AM                                                        

     AndroidCMWrench    
     a set of build script stuff to execute code metric report generatio afte the IDE 
     incremental builder has executed.
     
     Logical sequence is:
     
     1. Load antlibs taskdefs
     2. Check if .classpath metadata filei exists.
     3 Fail build if .classpath does not exist.
     4. if isEclipse.running is false fail the build
     5 if isEclipse.running is true execute the codemetrics ant target
                   
     fredgrott                                                                
     ====================================================================== -->
<project name="AndroidCMWrench" default="default">
    <description>
            a set of build script stuff to execute code metric report generatio afte the IDE 
    	incremental builder has executed.
    </description>
	
	<dirname file="${ant.file}" property="acmw.basedir"/>
	<!-- make sure weload env settings as properties-->
	<property environment="env"/>
	<!-- load property file and if not available fail the build
	
	      The properties are:
	      android.framework.jar.path=
          android.gmap.jar.path=
          android.compatibility.jar.path=
          android.analytics.jar.path=
          android.ads.jar.path=
	
	-->
	<loadproperties  srcFile="local.properties"/>
	<tstamp/>
	
	<property name="project.docs.dir" location="${acmw.basedir}/project.docs"/>
	<property name="project.docs.images.dir" location="${project.docs.dir}/images"/>
	<property name="javadocs.dir" location="${project.docs.dir}/javadocs"/>
	
	<property name="acmw.assets.dir" location="${acmw.basedir}/acmw.assets"/>
	<property name="acmw.antlibsdir" location="${acmw.assets.dir}/antlibs"/>
	<property name="acmw.codeqa.assets.dir"
		location="${acmw.assets.dir}/codeqa.assets"/>
	<property name="acmw.doclet.assets.dir" 
		location="${acmw.assets.dir}/doclet.assets"/>
	
	<property name="acmw.xsls.chartccn" 
		location="${acmw.codeqa.assets.dir}/xsls/chart_ccn.xsl"/>
	<property name="acmw.xsls.chartfunction" 
		location="${acmw.codeqa.assets.dir}/xsls/chart_function_package.xsl"/>
	<property name="acmw.xsls.chartncsspackage" 
		location="${acmw.codeqa.assets.dir}/xsls/chart_ncss_package.xsl"/>
	<property name="acmw.xsls.chartncss"
		location="${acmw.codeqa.assets.dir}/xsls/chart_ncss.xsl"/>
	<property name="acmw.xsls.checkstyle"
		location="${acmw.codeqa.assets.dir}/xsls/checkstyle.xsl"/>
	<property name="acmw.xsls.classycle" 
		location="${acmw.codeqa.assets.dir}/xsls/classycle.xsl"/>
	<property name="acmw.xsls.javancssgraph" 
		location="${acmw.codeqa.assets.dir}/xsls/javancss_graph.xsl"/>
	<property name="acmw.xsls.javancsshtml" 
		location="${acmw.codeqa.assets.dir}/xsls/javancss2html.xsl"/>
	<property name="acmw.xsls.jdepend" 
		location="${acmw.codeqa.assets.dir}/xsls/jdepend.xsl"/>
	<property name="acmw.xsls.jdependdot" 
		location="${acmw.codeqa.assets.dir}/xsls/jdepend2dot.xsl"/>
	<property name="acmw.xsls.pmd" 
		location="${acmw.codeqa.assets.dir}/xsls/pmd.xsl"/>
	
	<property name="acmw.pmd.rulesets.name" value="customized-android"/>
	<property name="codeqa.report.today" value="${TODAY}"/>
	
	<property name="acmw.doclet.jar.path" 
		location="${acmw.doclet.assets.dir}/doclava-1.0.5.jar"/>
	<property name="acmw.doclet.doclava.assets.dir" 
		location="${acmw.doclet.assets.dir}/assets"/>
	
	<path id="antlibs.path">
	             <fileset dir="${acmw.antlibsdir}">
		               <include name="**/*.jar"/>
		        </fileset>
	</path>
	
	<!-- antlib taskdefs -->
	<taskdef resource="net/sf/antcontrib/antlib.xml"
	                      classpathref="antlibs.path"/>
	<taskdef resource="checkstyletask.properties"
	                 classpath="antlibs.path"/>
	<!-- classycle site directios wrong, requires classpathref not classpath to 
	              load taskdef via antclassloader-->
	<taskdef name="classycleDependencyCheck" 
	                     classname="classycle.ant.DependencyCheckingTask"
	                      classpathref="antlibs.path"/>
	<taskdef name="classycleReport" classname="classycle.ant.ReportTask"
	                     classpathref="antlibs.path"/>
	<!-- javancss site docs wrong need to use classpathref instead of classpath-->
	<taskdef name="javancss"
	                    classname="javancss.JavancssAntTask"
	                    classpathref="antlibs.path"/>
	 <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask"
	                    classpathref="antlibs.path"/>
	
	<!-- pmd and checkstyle config file locations-->
	    <property name="checkstyle.config.file" 
	        location="${acmw.basedir}/eclipse.checkstyle.android.xml"/>
	    <property name="pmd.ruleset.file" 
	        location="${acmw.basedir}/android_pmd_ruleset.xml"/>
	
	<!-- other paths -->
	<path id="our.source.path">
	             <fileset dir="src">
	             	<include name="**/*.java"/>
	             </fileset>
		       <fileset dir="gen">
		       	     <include name="**/*.java"/>
		       	</fileset>
	</path>
	<path id="our.android.jars.path">
		<!-- We have to check if our jar property values are something or nothing-->
		<if>
			<isset property="android.framework.jar.path"/>
			<then>
				  <include file="${android.framework.jar.path}"/>
			</then>
			<else>
				<fail message="whops need at least android.jar path defiend in local.proeprties"/>
			</else>
		</if>
	        <if>
		        <isset property="${android.gmap.jar.path}"/>
	        <then>
	        	<include file="${android.gmap.jar.path}"/>
	        </then>
		</if>
		<if>
		     <isset property="${android.compatibility.jar.path}"/>
			<then>
			     <include file="${android.compatibility.jar.path}"/>
			</then>
		</if>
		<if>
		     <isset property="${android.analytics.jar.path}"/>
			<then>
			      <include file="${android.analytics.jar.path}"/>
			</then>
		</if>
		<if>
		     <isset property="${android.ads.jar.path}"/>
			<then>
			      <inlcude file="${android.ads.jar.path}"/>
			</then>
		</if>
	</path>
	
	
	<if>
	       <equals arg1="${eclipse.running}" arg2="true"/>
		<then>
			      
			</then>
		<else>
			<fail message="Something wrong here. You are not using Eclipse IDE to execute thecodemetrics task"/>
		</else>
	</if>
	
	<target name="codemeterics">
		<!-- First make sure the project.docs. folders and assets are created and 
		copied over-->
	    <mkdir dir="${project.docs.dir}"/>
		<mkdir dir="${project.docs.images.dir}"/>
		<mkdir dir="${javadocs.dir}"/>
		<copydir dest="${project.docs.images.dir}" src="${acmw.codeqa.assets.dir}/images"/>
		<copy todir="${project.docs.dir}">
		    <fileset dir="${acmw.codeqa.assets.dir}/css">
		      <include name="*.css"/>
		    </fileset>
			<fileset dir="${acmw.codeqa.assets.dir}/js">
			    <include name="*.js"/>
			</fileset>
		  </copy>
		
		<checkstyle config="${checkstyle.config.file}"
		              failureProperty="checkstyle.failure"
		              failOnViolation="false">
		    <formatter type="xml" tofile="${project.docs.dir}/checkstyle.xml"/>
		    <fileset dir="src" includes="**/*.java"/>
	</checkstyle>
		<xslt basedir="${project.docs.dir}" destdir="${project.docs.dir}"
		      style="${acmw.xsls.checkstyle}">
		  <mapper type="glob" from="checkstyle.xml" to="checkstyle.html"/>
		</xslt>

		<classycleReport reportFile="${project.docs.dir}/classycle.xml">
		      <fileset dir="bin/classes">
		        <include name="**/*.class"/>
		      </fileset>
		</classycleReport>
		<xslt basedir="${project.docs.dir}" destdir="${project.docs.dir}"
		              style="${acmw.xsls.classycle}">
		          <mapper type="glob" from="classycle.xml" to="classycle.html"/>
		        </xslt>
		<javancss srcdir="src"
		            generateReport="true"
		            outputfile="${project.docs.dir}/javancss.xml"
		            format="xml"/>
		<xslt basedir="${project.docs.dir}" destdir="${project.docs.dir}"
		              style="${acmw.xsls.javancsshtml}">
		          <mapper type="glob" from="javancss.xml" to="javancss.html"/>
		        </xslt>
		<jdepend outputfile="${project.docs.dir}/jdepend.xml" fork="yes" format="xml">
		    <sourcespath>
		        <pathelement location="src"/>
		    </sourcespath>
		    <classpath>
		        <pathelement location="bin/classes"/>
		        
		    </classpath>
		</jdepend>
		<xslt basedir="${project.docs.dir}" destdir="${project.docs.dir}"
		              style="${acmw.xsls.jdepend}">
		          <mapper type="glob" from="jdepend.xml" to="jdepend.html"/>
		        </xslt>
		<pmd rulesetfiles="${pmd.ruleset.file}">
		          <formatter type="net.sourceforge.pmd.renderers.HTMLRenderer" toFile="${project.docs.dir}/pmd.html"/>
		          <fileset dir="src">
		              <include name="**/*.java"/>
		          </fileset>
		      </pmd>
		
		
		
	</target>
	

    <!-- ================================= 
          target: default              
         ================================= -->
    <target name="default" depends="depends" 
    	description="a set of build script stuf to execute code metric report generatio afte the IDE incremental builder has executed.">
        
    </target>

    <!-- - - - - - - - - - - - - - - - - - 
          target: depends                      
         - - - - - - - - - - - - - - - - - -->
    <target name="depends">
    </target>

</project>
